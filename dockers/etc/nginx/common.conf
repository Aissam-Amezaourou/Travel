
# Blocked crawlers
if ( $http_user_agent ~ (XilopixBot|MojeekBot|AlvinetSpider|magpie|Genieo|dotbot|AhrefsBot|YisouSpider|R6_CommentReader|SemrushBot|Scrapy|rogerbot|MWFeedParser|AppEngine-Google|updownerbot|spbot|BacklinkCrawler|Sosospider|Ezooms|Gigabot|Sogou|SurveyBot|SEOENGBot|BPImageWalker|bdbrandprotect|LinkWalker|HTTrack|Vampire) ){
    return 403;
}

# https_mode
set $https_mode '' ;
if ($http_cf_visitor ~* "https" ) {
    set $https_mode 's' ;
}

## Mobile detection
set $mobile_rewrite '';
if ($http_user_agent ~* "(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino") {
    set $mobile_rewrite 1;
}
if ($http_user_agent ~* "^(1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-)") {
    set $mobile_rewrite 1;
}
set $uri_before "$request_uri" ;
# URL BEFORE rewrite
if ($request_uri ~* "(.*)\?(.*)" ) {
    set $uri_before "$1" ;
}
set $uri_purge "$uri_before";
# URL PURGE
if ($uri_before ~* "/purge/(.*)" ) {
    set $uri_purge "/$1" ;
}
set $args_before  '${args}' ;
set $args_after  '' ;
# Should ignore fb url args
if ( $args ~ "fb_action_ids=" ){
    set $args '';
}
# Should ignore utm_source
if ( $args ~ "utm_source=" ){
    set $args '';
}
if ( $args != '' ) {
    set $args_after  '?${args}' ;
}
## CACHE SETUP
#set $cache_key  "$https_mode$mobile_rewrite$scheme$request_method$host$uri_before$args_after";
#set $cache_key_purge  "$https_mode$mobile_rewrite$scheme$request_method$host$uri_purge$args_after";
set $cache_key  "$mobile_rewrite$request_method$host$uri_before$args_after";
set $cache_key_purge  "$mobile_rewrite$request_method$host$uri_purge$args_after";
fastcgi_cache_key "$cache_key" ; 
fastcgi_cache_min_uses  1;
fastcgi_cache_use_stale error timeout invalid_header updating http_500;
# only one request goes to fastcgi
fastcgi_cache_lock on;
# Cache revalidate
fastcgi_cache_revalidate on;
set $no_cache 1;
# POST requests and urls with a query string should always go to PHP
if ($request_method = POST) {
    set $no_cache 1;
}
# Don't use the cache for logged in users or recent commenters  ( |wordpress_[a-f0-9]+ )
if ( $arg_nocache = 1 ) {
    set $no_cache 1;
}
# Don't cache uris containing the following segments
# |[a-z0-9_-]+-sitemap([0-9]+)?.xml)   cache sitemaps
if ($request_uri ~* "(/wp-admin/|/xmlrpc.php|/wp-(app|cron|login|register|mail).php|wp-.*.php|index.php|wp-comments-popup.php|wp-links-opml.php|wp-locations.php|sitemap(_index)?.xml)") {
    set $no_cache 1;
}
# Don't use the cache for logged in users or recent commenters  ( |wordpress_[a-f0-9]+ )
if ($http_cookie ~* "nocache|comment_author|wp-postpass|wordpress_no_cache|wordpress_logged_in|PHPSESSID|wordpress|debug_cookies") {
    set $no_cache 1;
}


# setup GZIP
gzip on;
gzip_buffers 64 128k;
gzip_comp_level 4;
gzip_http_version 1.1;
gzip_proxied any;
gzip_types text/plain  text/x-component text/css   application/json   application/x-javascript   text/xsd text/xsl text/xml image/x-icon  application/xml   application/xml+rss   text/javascript  text/x-js image/gif   image/png   image/jpeg   image/jpg  text/richtext image/svg+xml font/ttf font/opentype application/vnd.ms-fontobject ;
gzip_vary on;

index index.php;

# Cache open file
open_file_cache max=6000 inactive=6m;
open_file_cache_valid 3m;
open_file_cache_min_uses 1;
open_file_cache_errors on;


client_max_body_size 50M;


# Add trailing slash to */wp-admin requests.
rewrite /wp-admin$ $scheme://$host$uri/ permanent;

# static files
location /_static/ {
    fastcgi_pass phpfpm;
    include fastcgi_params;
    fastcgi_param SCRIPT_FILENAME $document_root/wp-content/plugins/http-concat/ngx-http-concat.php;
    # Don't send set-cookie
    fastcgi_hide_header Set-Cookie;
    fastcgi_ignore_headers Cache-Control Expires Set-Cookie;
    #fastcgi_ignore_headers Set-Cookie;
    fastcgi_intercept_errors on;
    fastcgi_param PATH_INFO $fastcgi_path_info;
    fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;
    fastcgi_param IS_MOBILE $mobile_rewrite;
    fastcgi_param IS_HTTPS_CF $https_mode;
    fastcgi_read_timeout 1200;
    # cache
    fastcgi_cache_bypass 0;
    fastcgi_no_cache 0;
    fastcgi_cache_key "$cache_key";
    fastcgi_cache WORDPRESS;
    fastcgi_cache_valid 200 240m;
    fastcgi_cache_valid 301 2m;
    fastcgi_pass_header "X-Accel-Expires";

    add_header "X-NGINX-Cache" "$upstream_cache_status";
    add_header 'Access-Control-Allow-Origin' "*";
    #add_header 'X-Backend-Server' "$hostname";
    add_header Vary "Accept-Encoding";
    expires max;
}

# secure login
location = /wp-login.php {
    #auth_basic            "Restricted Area: hespress";
    #auth_basic_user_file  /etc/nginx/.htpasswd;
    try_files $uri /index.php =404;
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    fastcgi_pass phpfpm;
    fastcgi_index index.php;
    include fastcgi_params;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;
    fastcgi_param PATH_INFO $fastcgi_path_info;
    fastcgi_param IS_MOBILE $mobile_rewrite;
    fastcgi_param IS_HTTPS_CF $https_mode;

    fastcgi_read_timeout 300;
}

location ~ [^/]\.php(/|$) {
   try_files maintenance.html @phpfastcgi;
}

location @nocachefastcgi {
    internal;
    fastcgi_split_path_info ^(.+\.php)(/.+)$;

    fastcgi_pass phpfpm;
    fastcgi_index index.php;
    fastcgi_read_timeout 300;
    fastcgi_send_timeout 150;
    include fastcgi_params;

    fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;
    fastcgi_param PATH_INFO $fastcgi_path_info;
    fastcgi_param IS_MOBILE $mobile_rewrite;
    fastcgi_param IS_HTTPS_CF $https_mode;
    fastcgi_no_cache 1;
    fastcgi_cache_bypass 1;
    fastcgi_pass_header Set-Cookie;
    fastcgi_ignore_headers Cache-Control  Expires ;
    fastcgi_hide_header Non-Set-Cookie;

    add_header 'Access-Control-Allow-Origin' "*";

}
error_page         405 = @nocachefastcgi ;


# Pass all .php files onto a php-fpm/php-fcgi server.
location @phpfastcgi { 
    if ($request_method = POST ) {
      return 405;
    }
    fastcgi_split_path_info ^(.+?\.php)(/.*)$;
    if ( !-f $document_root$fastcgi_script_name ) {
      return 404;
    }
    # This is a robust solution for path info security issue and works with "cgi.fix_pathinfo = 1" in /etc/php.ini (default)

    include fastcgi_params;
    # Don't send set-cookie
    fastcgi_hide_header Set-Cookie;
    fastcgi_ignore_headers Vary Cache-Control Expires Set-Cookie;
    fastcgi_intercept_errors on;
    fastcgi_pass phpfpm;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param PATH_INFO $fastcgi_path_info;
    fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;
    fastcgi_param IS_MOBILE $mobile_rewrite;
    fastcgi_param IS_HTTPS_CF $https_mode;
    fastcgi_read_timeout 1200;
    
    # cache
    fastcgi_cache_bypass $no_cache;
    fastcgi_no_cache $no_cache;
    fastcgi_cache_key "$cache_key";

    fastcgi_cache WORDPRESS;
    fastcgi_cache_valid 200 60m;
    fastcgi_cache_valid 301 5m;

    # Limit rate to browsers    
    # limit_req zone=bots burst=10;
    add_header "X-NGINX-Cache" "$upstream_cache_status $http_cf_ipcountry";
    add_header 'Access-Control-Allow-Origin' "*";

}

location ~ /purge/(.*) {
    allow              all;
    fastcgi_cache_purge  WORDPRESS "$cache_key_purge" ;
}

# Not secure.. for videogen
location /wp-content/uploads/ {
    auth_basic off;
    expires max;
}


# Deny access to any files with a .php extension in the uploads directory
location ~* /(?:uploads|files)/.*\.php$ {
    deny all;
}

# This order might seem weird - this is attempted to match last if rules below fail.
# http://wiki.nginx.org/HttpCoreModule
location / {
    try_files $uri $uri/ /index.php?$args;
}


# Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
location = /favicon.ico { access_log off; log_not_found off; }
location ~ /\.          { access_log off; log_not_found off; deny all; }
location ~ ~$           { access_log off; log_not_found off; deny all; }
location ~ \.py$          { access_log off; log_not_found off; deny all; }
location ~ composer\.         { access_log off; log_not_found off; deny all; }
location ~ \.yml$          { access_log off; log_not_found off; deny all; }
location /data/  { access_log off; log_not_found off; deny all; }
location /backup/  { access_log off; log_not_found off; deny all; }
location /cron/  { access_log off; log_not_found off; deny all; }
location /dockers/  { access_log off; log_not_found off; deny all; }
location /vendor/  { access_log off; log_not_found off; deny all; }
